// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SettingsGrid component Matches snapshot 1`] = `
.c5 {
  -webkit-transform: scale(1);
  -ms-transform: scale(1);
  transform: scale(1);
}

.c4 {
  z-index: 1;
  height: 24px;
  width: 24px;
  color: currentColor;
  word-spacing: 0;
  vertical-align: middle;
}

.c4:not(:root) {
  overflow: visible;
}

.c10 {
  box-sizing: border-box;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  font-family: Metropolis,-apple-system,BlinkMacSystemFont,"Segoe UI","Roboto","Oxygen","Ubuntu","Cantarell","Fira Sans","Droid Sans","Helvetica Neue",sans-serif;
  font-weight: 600;
  border-width: 1px;
  line-height: 1.4;
  border-style: solid;
  text-transform: none;
  text-align: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  cursor: pointer;
  -webkit-transition: all 0.3s ease;
  transition: all 0.3s ease;
  background-color: rgb(255,255,255);
  border-color: rgb(255,255,255);
  border-top-color: hsl(0,0%,100%);
  border-bottom-color: hsl(0,0%,94%);
  color: rgb(0,0,0);
  font-size: 21px;
  border-radius: 3px;
  padding: 2px 4px;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  padding-top: 4px;
}

.c10:hover {
  -webkit-transition: all 0.1s ease;
  transition: all 0.1s ease;
}

.c10:focus,
.c10:active {
  -webkit-transition: all 0 ease;
  transition: all 0 ease;
}

.c10 > * {
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
}

.c10:active {
  -webkit-transition-duration: 0s;
  transition-duration: 0s;
  background-color: hsl(0,0%,92.5%);
  border-color: hsl(0,0%,92.5%);
  border-top-color: hsl(0,0%,98%);
  border-bottom-color: hsl(0,0%,87%);
  color: hsl(0,0%,0%);
}

.c10:hover {
  background-color: hsl(0,0%,98.5%);
  border-color: hsl(0,0%,98.5%);
  border-top-color: hsl(0,0%,100%);
  border-bottom-color: hsl(0,0%,92.6%);
  color: hsl(0,0%,0%);
}

.c10:focus {
  outline: none;
  box-shadow: 0 0 0 2px #0aab2a;
  z-index: 1;
}

.c10[disabled],
.c10[disabled]:hover,
.c10[disabled]:focus,
.c10[disabled]:active {
  cursor: default;
  opacity: 0.8;
  background-color: hsl(0,0%,94%);
  border-color: hsl(0,0%,94%);
  color: hsl(0,0%,0%);
}

.c10 > svg {
  width: 24px;
  height: 24px;
}

.c10 > :not(:first-child) {
  margin-top: 0.25px;
}

.c21 {
  box-sizing: border-box;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  font-family: Metropolis,-apple-system,BlinkMacSystemFont,"Segoe UI","Roboto","Oxygen","Ubuntu","Cantarell","Fira Sans","Droid Sans","Helvetica Neue",sans-serif;
  font-weight: 600;
  border-width: 1px;
  line-height: 1.4;
  border-style: solid;
  text-transform: none;
  text-align: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  cursor: pointer;
  -webkit-transition: all 0.3s ease;
  transition: all 0.3s ease;
  background-color: rgb(255,255,255);
  border-color: hsl(0,0%,94%);
  border-top-color: hsl(0,0%,100%);
  border-bottom-color: hsl(0,0%,82%);
  color: rgb(0,0,0);
  font-size: 14px;
  border-radius: 3px;
  padding: 1.4px 4px;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
}

.c21:hover {
  -webkit-transition: all 0.1s ease;
  transition: all 0.1s ease;
}

.c21:focus,
.c21:active {
  -webkit-transition: all 0 ease;
  transition: all 0 ease;
}

.c21 > * {
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
}

.c21:active {
  -webkit-transition-duration: 0s;
  transition-duration: 0s;
  background-color: hsl(0,0%,92.5%);
  border-color: hsl(0,0%,87%);
  border-top-color: hsl(0,0%,95.3%);
  border-bottom-color: hsl(0,0%,75.8%);
  color: hsl(0,0%,0%);
}

.c21:hover {
  background-color: hsl(0,0%,98.5%);
  border-color: hsl(0,0%,92.6%);
  border-top-color: hsl(0,0%,100%);
  border-bottom-color: hsl(0,0%,80.8%);
  color: hsl(0,0%,0%);
}

.c21:focus {
  outline: none;
  box-shadow: 0 0 0 2px #0aab2a;
  z-index: 1;
}

.c21[disabled],
.c21[disabled]:hover,
.c21[disabled]:focus,
.c21[disabled]:active {
  cursor: default;
  opacity: 0.8;
  background-color: hsl(0,0%,94%);
  border-color: hsl(0,0%,94%);
  color: hsl(0,0%,0%);
}

.c21 > svg {
  width: 24px;
  height: 24px;
}

.c21 > :not(:first-child) {
  margin-left: 4px;
  -webkit-flex-basis: auto;
  -ms-flex-basis: auto;
  flex-basis: auto;
}

.c1 {
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  color: rgb(32,32,32);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  margin-bottom: 32px;
}

.c1:first-of-type > * {
  border-top: 0;
}

.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  border-top: 1px solid rgb(217,217,217);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  margin: 0 auto;
  max-width: 1300px;
  padding: 16px;
  width: 100%;
}

.c7 {
  margin: 0 auto;
  max-width: 1300px;
  padding: 8px;
  width: 100%;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
}

.c3 {
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  padding-right: 8px !important;
}

.c6 {
  color: inherit;
  font-size: 18px;
  margin: 0;
}

.c9 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-align-self: stretch;
  -ms-flex-item-align: stretch;
  align-self: stretch;
  border: 1px solid rgb(230,230,230);
  border-radius: 3px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 160px;
  -ms-flex: 0 0 160px;
  flex: 0 0 160px;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: 140px;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 160px;
}

.c9 .label {
  bottom: 10px;
  position: absolute;
  left: 0;
  width: 100%;
}

.c9 > svg {
  color: rgb(10,171,42);
  -webkit-transition: all 0.3s ease;
  transition: all 0.3s ease;
  will-change: transform;
}

.c9 .btn-type-polling > svg {
  height: 100%;
}

.c9:hover svg,
.c9:active svg,
.c9:focus svg {
  -webkit-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
  -webkit-transition: all 0.1s ease;
  transition: all 0.1s ease;
}

.c9:active svg {
  -webkit-transform: scale(1);
  -ms-transform: scale(1);
  transform: scale(1);
  -webkit-transition: all 0;
  transition: all 0;
}

.c14 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-align-self: stretch;
  -ms-flex-item-align: stretch;
  align-self: stretch;
  border: 1px solid rgb(230,230,230);
  border-radius: 3px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 160px;
  -ms-flex: 0 0 160px;
  flex: 0 0 160px;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: 140px;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 160px;
}

.c14 .label {
  bottom: 10px;
  position: absolute;
  left: 0;
  width: 100%;
}

.c14 > svg {
  color: rgb(10,171,42);
  -webkit-transition: all 0.3s ease;
  transition: all 0.3s ease;
  will-change: transform;
}

.c14 .btn-type-polling > svg {
  height: 100%;
}

.c14:hover svg,
.c14:active svg,
.c14:focus svg {
  -webkit-transition: all 0.1s ease;
  transition: all 0.1s ease;
}

.c14:active svg {
  -webkit-transform: scale(1);
  -ms-transform: scale(1);
  transform: scale(1);
  -webkit-transition: all 0;
  transition: all 0;
}

.c12 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  border: 1px solid rgb(230,230,230);
  border-radius: 3px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 1 50%;
  -ms-flex: 0 1 50%;
  flex: 0 1 50%;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  margin-left: 16px;
  padding: 32px;
  position: relative;
}

.c12 .input-range__label.input-range__label--value {
  color: rgb(10,171,42);
  font-family: Metropolis,-apple-system,BlinkMacSystemFont,"Segoe UI","Roboto","Oxygen","Ubuntu","Cantarell","Fira Sans","Droid Sans","Helvetica Neue",sans-serif;
  font-size: 24px;
  font-weight: 400;
  line-height: 0;
  margin-left: -50%;
  -webkit-transform: translateX(-50%) translateY(4px);
  -ms-transform: translateX(-50%) translateY(4px);
  transform: translateX(-50%) translateY(4px);
  text-align: center;
  will-change: transform;
}

.c12 .input-range__label.input-range__label--value .input-range__label-container {
  position: static;
}

.c12 .label {
  bottom: 10px;
  font-size: 14px;
  left: 0px;
  position: absolute;
  text-align: center;
  width: 100%;
}

.c12 .input-range__slider-container {
  -webkit-transition: left 0;
  transition: left 0;
  will-change: transform;
}

.c12 .input-range__slider {
  background: rgb(10,171,42);
  border: none;
  border-radius: 0;
  -webkit-transition: -webkit-transform 0.3s ease;
  -webkit-transition: transform 0.3s ease;
  transition: transform 0.3s ease;
}

.c12 .input-range__slider:hover,
.c12 .input-range__slider:focus,
.c12 .input-range__slider:active {
  -webkit-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
}

.c12 .input-range__slider:before {
  border-left: 7px solid transparent;
  border-right: 7px solid transparent;
  border-top: 7px solid rgb(10,171,42);
  color: rgb(10,171,42);
  content: "";
  height: 0;
  position: absolute;
  top: 100%;
  width: 0;
}

.c12 .input-range__track {
  background-color: rgb(230,230,230);
  border-radius: 20px;
}

.c15 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  border: 1px solid rgb(230,230,230);
  border-radius: 3px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 1 50%;
  -ms-flex: 0 1 50%;
  flex: 0 1 50%;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  margin-left: 16px;
  padding: 32px;
  position: relative;
  background: #f3f3f3;
}

.c15 .input-range__label.input-range__label--value {
  color: rgb(10,171,42);
  font-family: Metropolis,-apple-system,BlinkMacSystemFont,"Segoe UI","Roboto","Oxygen","Ubuntu","Cantarell","Fira Sans","Droid Sans","Helvetica Neue",sans-serif;
  font-size: 24px;
  font-weight: 400;
  line-height: 0;
  margin-left: -50%;
  -webkit-transform: translateX(-50%) translateY(4px);
  -ms-transform: translateX(-50%) translateY(4px);
  transform: translateX(-50%) translateY(4px);
  text-align: center;
  will-change: transform;
}

.c15 .input-range__label.input-range__label--value .input-range__label-container {
  position: static;
}

.c15 .label {
  bottom: 10px;
  font-size: 14px;
  left: 0px;
  position: absolute;
  text-align: center;
  width: 100%;
}

.c15 .input-range__slider-container {
  -webkit-transition: left 0;
  transition: left 0;
  will-change: transform;
}

.c15 .input-range__slider {
  background: rgb(10,171,42);
  border: none;
  border-radius: 0;
  -webkit-transition: -webkit-transform 0.3s ease;
  -webkit-transition: transform 0.3s ease;
  transition: transform 0.3s ease;
}

.c15 .input-range__slider:hover,
.c15 .input-range__slider:focus,
.c15 .input-range__slider:active {
  -webkit-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
}

.c15 .input-range__slider:before {
  border-left: 7px solid transparent;
  border-right: 7px solid transparent;
  border-top: 7px solid rgb(10,171,42);
  color: rgb(10,171,42);
  content: "";
  height: 0;
  position: absolute;
  top: 100%;
  width: 0;
}

.c15 .input-range__track {
  background-color: rgb(230,230,230);
  border-radius: 20px;
}

.c15 .input-range__label.input-range__label--value {
  color: rgb(102,102,102);
}

.c15 .input-range--disabled .input-range__slider {
  background: rgb(102,102,102);
  cursor: default;
  border: none;
}

.c15 .input-range--disabled .input-range__slider:hover,
.c15 .input-range--disabled .input-range__slider:focus,
.c15 .input-range--disabled .input-range__slider:active {
  -webkit-transform: none;
  -ms-transform: none;
  transform: none;
}

.c15 .input-range__track {
  cursor: default;
}

.c15 .input-range__slider:before {
  border-top: 7px solid rgb(102,102,102);
  color: rgb(102,102,102);
}

.c11 {
  background-color: rgba(0,0,0,0.8);
  border-radius: 6px;
  color: rgb(255,255,255);
  font-family: Metropolis,-apple-system,BlinkMacSystemFont,"Segoe UI","Roboto","Oxygen","Ubuntu","Cantarell","Fira Sans","Droid Sans","Helvetica Neue",sans-serif;
  font-size: 11px;
  opacity: 0;
  padding: 10px;
  position: absolute;
  text-align: left;
  -webkit-transition: opacity 1s;
  transition: opacity 1s;
  visibility: hidden;
  white-space: normal;
  width: 160px;
  z-index: 1070;
  right: 120%;
  top: -5px;
}

.c8 {
  border-bottom: 1px solid rgb(217,217,217);
  cursor: default;
  display: inline-block;
  position: relative;
}

.c13 {
  border-bottom: 1px solid rgb(217,217,217);
  cursor: help;
  display: inline-block;
  position: relative;
}

.c13:hover > :last-child {
  opacity: 1;
  visibility: visible;
  z-index: 1070;
}

.c0 {
  -webkit-backdrop-filter: blur(10px);
  backdrop-filter: blur(10px);
  background-color: rgba(0,0,0,0.85);
  border-radius: 3px;
  color: rgb(242,242,242);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: 400px;
  left: 50%;
  margin-top: -200px;
  opacity: 0;
  padding: 24px;
  position: absolute;
  top: 50vh;
  -webkit-transform: translateX(-50%) translateY(50px) scale(0.98);
  -ms-transform: translateX(-50%) translateY(50px) scale(0.98);
  transform: translateX(-50%) translateY(50px) scale(0.98);
  -webkit-transition: all 0.2s ease;
  transition: all 0.2s ease;
  width: 500px;
}

.c0 > [class*="Content"] > * {
  position: relative;
  top: 0.5em;
  -webkit-transition: all 0.4s cubic-bezier(0.1,0.5,0.2,1.3);
  transition: all 0.4s cubic-bezier(0.1,0.5,0.2,1.3);
  -webkit-transition: all 0.4s ease;
  transition: all 0.4s ease;
}

[class*="after-close"] > .c0 {
  opacity: 0;
  -webkit-transform: translateX(-50%) translateY(0) scale(0.5);
  -ms-transform: translateX(-50%) translateY(0) scale(0.5);
  transform: translateX(-50%) translateY(0) scale(0.5);
}

[class*="after-close"] > .c0 > [class*="Content"] > * {
  top: 1em;
}

[class*="after-open"] > .c0 {
  opacity: 1;
  -webkit-transform: translateX(-50%) translateY(0) scale(1);
  -ms-transform: translateX(-50%) translateY(0) scale(1);
  transform: translateX(-50%) translateY(0) scale(1);
}

[class*="after-open"] > .c0:focus {
  outline: 0;
}

[class*="after-open"] > .c0 > [class*="Content"] > * {
  top: 0;
}

.c16 {
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  background-color: rgb(230,230,230);
  border-radius: 3px;
  color: rgb(0,0,0);
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 300px;
  -ms-flex: 1 1 300px;
  flex: 1 1 300px;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  font-family: Metropolis,-apple-system,BlinkMacSystemFont,"Segoe UI","Roboto","Oxygen","Ubuntu","Cantarell","Fira Sans","Droid Sans","Helvetica Neue",sans-serif;
  margin: 4px;
}

.c16:first-child:last-child {
  -webkit-flex-grow: 0;
  -ms-flex-grow: 0;
  flex-grow: 0;
}

.c16:first-child:last-child > * {
  text-align: center;
}

.c16:first-child:last-child > * > :first-child {
  padding-left: 0;
}

.c17 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 1 100%;
  -ms-flex: 0 1 100%;
  flex: 0 1 100%;
  -webkit-flex: 1 1 0;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  min-height: 125px;
  padding: 8px 4px;
  position: relative;
}

.c17 + .c17:before {
  border-top: 1px solid currentColor;
  content: "";
  left: 0;
  opacity: 0.125;
  position: absolute;
  right: 0;
  top: 0;
}

.c17 button {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  margin: 8px 0;
}

.c18 {
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 100%;
  -ms-flex: 1 1 100%;
  flex: 1 1 100%;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  padding: 8px 0;
}

.c18:first-child {
  padding-left: 16px;
}

.c19 {
  font-size: 11px;
  margin: 0;
  padding: 0;
  font-weight: 600;
  min-height: 1em;
}

.c20 {
  font-size: 32px;
  word-break: break-all;
  margin: 0;
  line-height: 1.1;
  min-height: 1em;
}

@media all and (max-width:1000px) {
  .c16 {
    -webkit-flex: 0 0 300px;
    -ms-flex: 0 0 300px;
    flex: 0 0 300px;
    -webkit-order: 1;
    -ms-flex-order: 1;
    order: 1;
  }
}

<Connect(InjectIntl(SettingsGrid))
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en-US",
      "messages": Object {
        "GMLineChart.noChartableData": "No Chartable Data",
        "GMLineChart.noMetricsFound": "Could not find the following metrics:",
        "GMLineChart.screenReaderGraphDescription.noData": "The average for currently displayed data is equal to 0.",
        "GMLineChart.screenReaderGraphDescription.withData": "A tabular representation of the {title} chart data: median {median} average {average} mode {mode} maximum {max} minimum {min} number of observations {dataPoints} complete data time series follows {timeSeries}",
        "GMServiceTableLineItem.tooltip": "This microservice instance does not have metrics to display.",
        "explorer.selectMetric": "Select a metric to display",
        "fabric.capability": "Capability",
        "fabric.error": "No Services Found",
        "fabric.name": "Name",
        "fabric.none": "None",
        "fabric.owner": "Owner",
        "fabric.searchPlaceholder": "Search Services",
        "fabric.status": "Status",
        "fabricHeaderContent.allServices": "All Services",
        "fabricHeaderContent.down": "Down",
        "fabricHeaderContent.services": "Services",
        "fabricHeaderContent.stable": "Stable",
        "fabricHeaderContent.summary": "Summary",
        "fabricHeaderContent.warning": "Warning",
        "fabricMicroservices.disableFetchError": "Automatically disabling the fetching of Fabric microservices after three attempts.",
        "fabricMicroservices.fetchError": "Fetching Fabric Microservices failed",
        "fabricRouter.noInstance": "{instanceID} is not a known instance of {serviceName} {serviceVersion}",
        "fabricRouter.noMetrics": "{serviceName} {serviceVersion} does not have metrics to display",
        "fabricRouter.noService": "{serviceSlug} is not a known microservice",
        "fabricRouter.notAuthorized": "You are not authorized to view {serviceName} {serviceVersion}",
        "footer.copyright": "Copyright &copy; 2018 Decipher Technology Studios. All rights reserved. <br /> Copyright &copy; 2018 Grey Matter, a Decipher Technology Studios product. All rights reserved.",
        "functionsGrid.error": "No Functions Found",
        "functionsGrid.errorPercent": "Error %",
        "functionsGrid.function": "Function",
        "functionsGrid.latency50": "Latency 50%",
        "functionsGrid.latency99": "Latency 99%",
        "functionsGrid.requests": "Requests",
        "functionsGrid.searchPlaceholder": "Search Functions",
        "goHeaderContent.explorer": "Explorer",
        "goHeaderContent.functions": "Functions",
        "goHeaderContent.requests": "Requests",
        "goHeaderContent.routes": "Routes",
        "goHeaderContent.summary": "Summary",
        "goHeaderContent.uptime": "Uptime",
        "inspector.hideStaticMetric": "Hide all static metrics",
        "inspector.hideZeroMetric": "Hide all metrics with only zero values",
        "inspector.searchAriaLabel": "Search All Metrics",
        "inspector.searchPlaceholder": "Search",
        "instanceMetricsUtils.disableFetchError": "Automatically disabling the fetching of metrics after three attempts. You can turn polling back on in Settings.",
        "instanceMetricsUtils.fetchError": "Fetching Metrics failed",
        "jvmHeaderContent.explorer": "Explorer",
        "jvmHeaderContent.requests": "Requests",
        "jvmHeaderContent.routes": "Routes",
        "jvmHeaderContent.summary": "Summary",
        "jvmHeaderContent.threads": "Threads",
        "jvmHeaderContent.uptime": "Uptime",
        "languageSelector.languages": "Languages",
        "pollingSettings.button.pause": "Pause Polling",
        "pollingSettings.button.resume": "Resume Polling",
        "pollingSettings.pollingIntervals": "Polling Interval(s)",
        "routesGrid.error": "No Routes Found",
        "routesGrid.errorPercent": "Error %",
        "routesGrid.latency50": "Latency 50%",
        "routesGrid.latency99": "Latency 99%",
        "routesGrid.requests": "Requests",
        "routesGrid.route": "Route",
        "routesGrid.searchPlaceholder": "Search Routes",
        "serviceHeaderContent.instances": "Instances",
        "serviceView.error": "No Instances Found",
        "serviceView.name": "Name",
        "serviceView.searchPlaceholder": "Search Instances",
        "serviceView.uptime": "Uptime",
        "settingsGrid.cacheSize": "Cache Size",
        "settingsGrid.clearCache": "Clear Cache",
        "settingsGrid.fabricPolling": "Fabric Polling",
        "settingsGrid.instancePolling": "Instance Polling",
        "settingsGrid.metricsCache": "Metrics Cache",
        "settingsGrid.modal.question": "Are you sure that you want to clear the cached metrics data?",
        "settingsGrid.modal.secondary": "This action cannot be undone.",
        "settingsGrid.polling": "Polling",
        "settingsGrid.tooltip": "Select an instance to turn on polling",
        "summary.errorRate": "Error Rate",
        "summary.hostCPUCores": "Host CPU Cores",
        "summary.hostCPUUsage": "Host CPU Utilized",
        "summary.hostCPUUsageDetail": "{count, plural, one {# Core on Host} other {#  Cores on Host}}",
        "summary.memoryUsage": "Memory Utilized",
        "summary.memoryUsageDetail": "{hostMemoryAvail} Free on Host",
        "summary.requestsPerSecond": "Requests Per Second",
        "summary.responseTime": "Avg. Response Time",
        "summary.statistics": "Statistics",
        "summary.uptime": "Uptime",
        "summary.vitals": "Vitals",
        "table.errorPercent": "Error %",
        "table.function": "Function",
        "table.instance": "Instance",
        "table.latency": "Latency",
        "table.requests": "Requests",
        "table.requestsSec": "Requests/sec",
        "table.route": "Route",
        "table.uptime": "Uptime",
        "tableColLatencyHeader.latency": "Latency",
        "tableColLatencyHeader.latency50": "50%",
        "tableColLatencyHeader.latency99": "99%",
        "tableColLatencyHeader.tooltip": "Latency 50% refers to the average latency of the 50% percentile, while Latency 99% is the average latency for the slowest 1% of responses, also known as tail latency.",
        "tableLineItem.requests": "Requests over Time for {item}",
        "tableToolbar.cards": "Cards",
        "tableToolbar.group": "Group",
        "tableToolbar.list": "List",
        "tableToolbar.sort": "Sort",
        "threadsGrid.errorFetchFail": "Failed to Fetch Threads",
        "threadsGrid.errorNotFound": "No Threads Found",
        "threadsGrid.id": "ID",
        "threadsGrid.name": "Name",
        "threadsGrid.none": "None",
        "threadsGrid.searchPlaceholder": "Search Threads",
        "threadsGrid.state": "State",
        "threadsTableHeader.daemon": "Daemon",
        "threadsTableHeader.id": "ID",
        "threadsTableHeader.name": "Name",
        "threadsTableHeader.priority": "Priority",
        "threadsTableHeader.state": "State",
      },
      "now": [Function],
      "textComponent": "span",
    }
  }
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <InjectIntl(SettingsGrid)
    dispatch={[Function]}
    fabricPollingInterval={10000}
    fabricServer="http://localhost:1337"
    instanceMetricsPollingInterval={10000}
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en-US",
        "messages": Object {
          "GMLineChart.noChartableData": "No Chartable Data",
          "GMLineChart.noMetricsFound": "Could not find the following metrics:",
          "GMLineChart.screenReaderGraphDescription.noData": "The average for currently displayed data is equal to 0.",
          "GMLineChart.screenReaderGraphDescription.withData": "A tabular representation of the {title} chart data: median {median} average {average} mode {mode} maximum {max} minimum {min} number of observations {dataPoints} complete data time series follows {timeSeries}",
          "GMServiceTableLineItem.tooltip": "This microservice instance does not have metrics to display.",
          "explorer.selectMetric": "Select a metric to display",
          "fabric.capability": "Capability",
          "fabric.error": "No Services Found",
          "fabric.name": "Name",
          "fabric.none": "None",
          "fabric.owner": "Owner",
          "fabric.searchPlaceholder": "Search Services",
          "fabric.status": "Status",
          "fabricHeaderContent.allServices": "All Services",
          "fabricHeaderContent.down": "Down",
          "fabricHeaderContent.services": "Services",
          "fabricHeaderContent.stable": "Stable",
          "fabricHeaderContent.summary": "Summary",
          "fabricHeaderContent.warning": "Warning",
          "fabricMicroservices.disableFetchError": "Automatically disabling the fetching of Fabric microservices after three attempts.",
          "fabricMicroservices.fetchError": "Fetching Fabric Microservices failed",
          "fabricRouter.noInstance": "{instanceID} is not a known instance of {serviceName} {serviceVersion}",
          "fabricRouter.noMetrics": "{serviceName} {serviceVersion} does not have metrics to display",
          "fabricRouter.noService": "{serviceSlug} is not a known microservice",
          "fabricRouter.notAuthorized": "You are not authorized to view {serviceName} {serviceVersion}",
          "footer.copyright": "Copyright &copy; 2018 Decipher Technology Studios. All rights reserved. <br /> Copyright &copy; 2018 Grey Matter, a Decipher Technology Studios product. All rights reserved.",
          "functionsGrid.error": "No Functions Found",
          "functionsGrid.errorPercent": "Error %",
          "functionsGrid.function": "Function",
          "functionsGrid.latency50": "Latency 50%",
          "functionsGrid.latency99": "Latency 99%",
          "functionsGrid.requests": "Requests",
          "functionsGrid.searchPlaceholder": "Search Functions",
          "goHeaderContent.explorer": "Explorer",
          "goHeaderContent.functions": "Functions",
          "goHeaderContent.requests": "Requests",
          "goHeaderContent.routes": "Routes",
          "goHeaderContent.summary": "Summary",
          "goHeaderContent.uptime": "Uptime",
          "inspector.hideStaticMetric": "Hide all static metrics",
          "inspector.hideZeroMetric": "Hide all metrics with only zero values",
          "inspector.searchAriaLabel": "Search All Metrics",
          "inspector.searchPlaceholder": "Search",
          "instanceMetricsUtils.disableFetchError": "Automatically disabling the fetching of metrics after three attempts. You can turn polling back on in Settings.",
          "instanceMetricsUtils.fetchError": "Fetching Metrics failed",
          "jvmHeaderContent.explorer": "Explorer",
          "jvmHeaderContent.requests": "Requests",
          "jvmHeaderContent.routes": "Routes",
          "jvmHeaderContent.summary": "Summary",
          "jvmHeaderContent.threads": "Threads",
          "jvmHeaderContent.uptime": "Uptime",
          "languageSelector.languages": "Languages",
          "pollingSettings.button.pause": "Pause Polling",
          "pollingSettings.button.resume": "Resume Polling",
          "pollingSettings.pollingIntervals": "Polling Interval(s)",
          "routesGrid.error": "No Routes Found",
          "routesGrid.errorPercent": "Error %",
          "routesGrid.latency50": "Latency 50%",
          "routesGrid.latency99": "Latency 99%",
          "routesGrid.requests": "Requests",
          "routesGrid.route": "Route",
          "routesGrid.searchPlaceholder": "Search Routes",
          "serviceHeaderContent.instances": "Instances",
          "serviceView.error": "No Instances Found",
          "serviceView.name": "Name",
          "serviceView.searchPlaceholder": "Search Instances",
          "serviceView.uptime": "Uptime",
          "settingsGrid.cacheSize": "Cache Size",
          "settingsGrid.clearCache": "Clear Cache",
          "settingsGrid.fabricPolling": "Fabric Polling",
          "settingsGrid.instancePolling": "Instance Polling",
          "settingsGrid.metricsCache": "Metrics Cache",
          "settingsGrid.modal.question": "Are you sure that you want to clear the cached metrics data?",
          "settingsGrid.modal.secondary": "This action cannot be undone.",
          "settingsGrid.polling": "Polling",
          "settingsGrid.tooltip": "Select an instance to turn on polling",
          "summary.errorRate": "Error Rate",
          "summary.hostCPUCores": "Host CPU Cores",
          "summary.hostCPUUsage": "Host CPU Utilized",
          "summary.hostCPUUsageDetail": "{count, plural, one {# Core on Host} other {#  Cores on Host}}",
          "summary.memoryUsage": "Memory Utilized",
          "summary.memoryUsageDetail": "{hostMemoryAvail} Free on Host",
          "summary.requestsPerSecond": "Requests Per Second",
          "summary.responseTime": "Avg. Response Time",
          "summary.statistics": "Statistics",
          "summary.uptime": "Uptime",
          "summary.vitals": "Vitals",
          "table.errorPercent": "Error %",
          "table.function": "Function",
          "table.instance": "Instance",
          "table.latency": "Latency",
          "table.requests": "Requests",
          "table.requestsSec": "Requests/sec",
          "table.route": "Route",
          "table.uptime": "Uptime",
          "tableColLatencyHeader.latency": "Latency",
          "tableColLatencyHeader.latency50": "50%",
          "tableColLatencyHeader.latency99": "99%",
          "tableColLatencyHeader.tooltip": "Latency 50% refers to the average latency of the 50% percentile, while Latency 99% is the average latency for the slowest 1% of responses, also known as tail latency.",
          "tableLineItem.requests": "Requests over Time for {item}",
          "tableToolbar.cards": "Cards",
          "tableToolbar.group": "Group",
          "tableToolbar.list": "List",
          "tableToolbar.sort": "Sort",
          "threadsGrid.errorFetchFail": "Failed to Fetch Threads",
          "threadsGrid.errorNotFound": "No Threads Found",
          "threadsGrid.id": "ID",
          "threadsGrid.name": "Name",
          "threadsGrid.none": "None",
          "threadsGrid.searchPlaceholder": "Search Threads",
          "threadsGrid.state": "State",
          "threadsTableHeader.daemon": "Daemon",
          "threadsTableHeader.id": "ID",
          "threadsTableHeader.name": "Name",
          "threadsTableHeader.priority": "Priority",
          "threadsTableHeader.state": "State",
        },
        "now": [Function],
        "textComponent": "span",
      }
    }
    isPollingFabric={true}
    isPollingInstanceMetrics={false}
    metricsCacheSize="67.48 KB"
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
  >
    <SettingsGrid
      dispatch={[Function]}
      fabricPollingInterval={10000}
      fabricServer="http://localhost:1337"
      instanceMetricsPollingInterval={10000}
      intl={
        Object {
          "defaultFormats": Object {},
          "defaultLocale": "en",
          "formatDate": [Function],
          "formatHTMLMessage": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatPlural": [Function],
          "formatRelative": [Function],
          "formatTime": [Function],
          "formats": Object {},
          "formatters": Object {
            "getDateTimeFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralFormat": [Function],
            "getRelativeFormat": [Function],
          },
          "locale": "en-US",
          "messages": Object {
            "GMLineChart.noChartableData": "No Chartable Data",
            "GMLineChart.noMetricsFound": "Could not find the following metrics:",
            "GMLineChart.screenReaderGraphDescription.noData": "The average for currently displayed data is equal to 0.",
            "GMLineChart.screenReaderGraphDescription.withData": "A tabular representation of the {title} chart data: median {median} average {average} mode {mode} maximum {max} minimum {min} number of observations {dataPoints} complete data time series follows {timeSeries}",
            "GMServiceTableLineItem.tooltip": "This microservice instance does not have metrics to display.",
            "explorer.selectMetric": "Select a metric to display",
            "fabric.capability": "Capability",
            "fabric.error": "No Services Found",
            "fabric.name": "Name",
            "fabric.none": "None",
            "fabric.owner": "Owner",
            "fabric.searchPlaceholder": "Search Services",
            "fabric.status": "Status",
            "fabricHeaderContent.allServices": "All Services",
            "fabricHeaderContent.down": "Down",
            "fabricHeaderContent.services": "Services",
            "fabricHeaderContent.stable": "Stable",
            "fabricHeaderContent.summary": "Summary",
            "fabricHeaderContent.warning": "Warning",
            "fabricMicroservices.disableFetchError": "Automatically disabling the fetching of Fabric microservices after three attempts.",
            "fabricMicroservices.fetchError": "Fetching Fabric Microservices failed",
            "fabricRouter.noInstance": "{instanceID} is not a known instance of {serviceName} {serviceVersion}",
            "fabricRouter.noMetrics": "{serviceName} {serviceVersion} does not have metrics to display",
            "fabricRouter.noService": "{serviceSlug} is not a known microservice",
            "fabricRouter.notAuthorized": "You are not authorized to view {serviceName} {serviceVersion}",
            "footer.copyright": "Copyright &copy; 2018 Decipher Technology Studios. All rights reserved. <br /> Copyright &copy; 2018 Grey Matter, a Decipher Technology Studios product. All rights reserved.",
            "functionsGrid.error": "No Functions Found",
            "functionsGrid.errorPercent": "Error %",
            "functionsGrid.function": "Function",
            "functionsGrid.latency50": "Latency 50%",
            "functionsGrid.latency99": "Latency 99%",
            "functionsGrid.requests": "Requests",
            "functionsGrid.searchPlaceholder": "Search Functions",
            "goHeaderContent.explorer": "Explorer",
            "goHeaderContent.functions": "Functions",
            "goHeaderContent.requests": "Requests",
            "goHeaderContent.routes": "Routes",
            "goHeaderContent.summary": "Summary",
            "goHeaderContent.uptime": "Uptime",
            "inspector.hideStaticMetric": "Hide all static metrics",
            "inspector.hideZeroMetric": "Hide all metrics with only zero values",
            "inspector.searchAriaLabel": "Search All Metrics",
            "inspector.searchPlaceholder": "Search",
            "instanceMetricsUtils.disableFetchError": "Automatically disabling the fetching of metrics after three attempts. You can turn polling back on in Settings.",
            "instanceMetricsUtils.fetchError": "Fetching Metrics failed",
            "jvmHeaderContent.explorer": "Explorer",
            "jvmHeaderContent.requests": "Requests",
            "jvmHeaderContent.routes": "Routes",
            "jvmHeaderContent.summary": "Summary",
            "jvmHeaderContent.threads": "Threads",
            "jvmHeaderContent.uptime": "Uptime",
            "languageSelector.languages": "Languages",
            "pollingSettings.button.pause": "Pause Polling",
            "pollingSettings.button.resume": "Resume Polling",
            "pollingSettings.pollingIntervals": "Polling Interval(s)",
            "routesGrid.error": "No Routes Found",
            "routesGrid.errorPercent": "Error %",
            "routesGrid.latency50": "Latency 50%",
            "routesGrid.latency99": "Latency 99%",
            "routesGrid.requests": "Requests",
            "routesGrid.route": "Route",
            "routesGrid.searchPlaceholder": "Search Routes",
            "serviceHeaderContent.instances": "Instances",
            "serviceView.error": "No Instances Found",
            "serviceView.name": "Name",
            "serviceView.searchPlaceholder": "Search Instances",
            "serviceView.uptime": "Uptime",
            "settingsGrid.cacheSize": "Cache Size",
            "settingsGrid.clearCache": "Clear Cache",
            "settingsGrid.fabricPolling": "Fabric Polling",
            "settingsGrid.instancePolling": "Instance Polling",
            "settingsGrid.metricsCache": "Metrics Cache",
            "settingsGrid.modal.question": "Are you sure that you want to clear the cached metrics data?",
            "settingsGrid.modal.secondary": "This action cannot be undone.",
            "settingsGrid.polling": "Polling",
            "settingsGrid.tooltip": "Select an instance to turn on polling",
            "summary.errorRate": "Error Rate",
            "summary.hostCPUCores": "Host CPU Cores",
            "summary.hostCPUUsage": "Host CPU Utilized",
            "summary.hostCPUUsageDetail": "{count, plural, one {# Core on Host} other {#  Cores on Host}}",
            "summary.memoryUsage": "Memory Utilized",
            "summary.memoryUsageDetail": "{hostMemoryAvail} Free on Host",
            "summary.requestsPerSecond": "Requests Per Second",
            "summary.responseTime": "Avg. Response Time",
            "summary.statistics": "Statistics",
            "summary.uptime": "Uptime",
            "summary.vitals": "Vitals",
            "table.errorPercent": "Error %",
            "table.function": "Function",
            "table.instance": "Instance",
            "table.latency": "Latency",
            "table.requests": "Requests",
            "table.requestsSec": "Requests/sec",
            "table.route": "Route",
            "table.uptime": "Uptime",
            "tableColLatencyHeader.latency": "Latency",
            "tableColLatencyHeader.latency50": "50%",
            "tableColLatencyHeader.latency99": "99%",
            "tableColLatencyHeader.tooltip": "Latency 50% refers to the average latency of the 50% percentile, while Latency 99% is the average latency for the slowest 1% of responses, also known as tail latency.",
            "tableLineItem.requests": "Requests over Time for {item}",
            "tableToolbar.cards": "Cards",
            "tableToolbar.group": "Group",
            "tableToolbar.list": "List",
            "tableToolbar.sort": "Sort",
            "threadsGrid.errorFetchFail": "Failed to Fetch Threads",
            "threadsGrid.errorNotFound": "No Threads Found",
            "threadsGrid.id": "ID",
            "threadsGrid.name": "Name",
            "threadsGrid.none": "None",
            "threadsGrid.searchPlaceholder": "Search Threads",
            "threadsGrid.state": "State",
            "threadsTableHeader.daemon": "Daemon",
            "threadsTableHeader.id": "ID",
            "threadsTableHeader.name": "Name",
            "threadsTableHeader.priority": "Priority",
            "threadsTableHeader.state": "State",
          },
          "now": [Function],
          "textComponent": "span",
        }
      }
      isPollingFabric={true}
      isPollingInstanceMetrics={false}
      metricsCacheSize="67.48 KB"
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
      storeSubscription={
        Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": [Function],
        }
      }
    >
      <ConfirmationModal
        isOpen={false}
        onCancel={[Function]}
        onConfirm={[Function]}
        question="Are you sure that you want to clear the cached metrics data?"
        secondary="This action cannot be undone."
      >
        <Styled(Modal)
          aria={
            Object {
              "describedby": "secondaryText",
              "labelledby": "question",
            }
          }
          isOpen={false}
          overlayClassName="modalOverlay"
          shouldCloseOnOverlayClick={true}
        >
          <Modal
            aria={
              Object {
                "describedby": "secondaryText",
                "labelledby": "question",
              }
            }
            ariaHideApp={true}
            bodyOpenClassName="ReactModal__Body--open"
            className="c0"
            closeTimeoutMS={0}
            isOpen={false}
            overlayClassName="modalOverlay"
            parentSelector={[Function]}
            portalClassName="ReactModalPortal"
            shouldCloseOnEsc={true}
            shouldCloseOnOverlayClick={true}
            shouldFocusAfterRender={true}
            shouldReturnFocusAfterClose={true}
          >
            <ModalPortal
              aria={
                Object {
                  "describedby": "secondaryText",
                  "labelledby": "question",
                }
              }
              ariaHideApp={true}
              bodyOpenClassName="ReactModal__Body--open"
              className="c0"
              closeTimeoutMS={0}
              defaultStyles={
                Object {
                  "content": Object {
                    "WebkitOverflowScrolling": "touch",
                    "background": "#fff",
                    "border": "1px solid #ccc",
                    "borderRadius": "4px",
                    "bottom": "40px",
                    "left": "40px",
                    "outline": "none",
                    "overflow": "auto",
                    "padding": "20px",
                    "position": "absolute",
                    "right": "40px",
                    "top": "40px",
                  },
                  "overlay": Object {
                    "backgroundColor": "rgba(255, 255, 255, 0.75)",
                    "bottom": 0,
                    "left": 0,
                    "position": "fixed",
                    "right": 0,
                    "top": 0,
                  },
                }
              }
              isOpen={false}
              overlayClassName="modalOverlay"
              parentSelector={[Function]}
              portalClassName="ReactModalPortal"
              shouldCloseOnEsc={true}
              shouldCloseOnOverlayClick={true}
              shouldFocusAfterRender={true}
              shouldReturnFocusAfterClose={true}
              style={
                Object {
                  "content": Object {},
                  "overlay": Object {},
                }
              }
            />
          </Modal>
        </Styled(Modal)>
      </ConfirmationModal>
      <ErrorBoundary>
        <InjectIntl(PollingSettings)
          changePollingInterval={[Function]}
          glyph="Fabric"
          interval={10000}
          isPolling={true}
          startPolling={[Function]}
          stopPolling={[Function]}
          title="Fabric Polling"
        >
          <PollingSettings
            changePollingInterval={[Function]}
            glyph="Fabric"
            interval={10000}
            intl={
              Object {
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en-US",
                "messages": Object {
                  "GMLineChart.noChartableData": "No Chartable Data",
                  "GMLineChart.noMetricsFound": "Could not find the following metrics:",
                  "GMLineChart.screenReaderGraphDescription.noData": "The average for currently displayed data is equal to 0.",
                  "GMLineChart.screenReaderGraphDescription.withData": "A tabular representation of the {title} chart data: median {median} average {average} mode {mode} maximum {max} minimum {min} number of observations {dataPoints} complete data time series follows {timeSeries}",
                  "GMServiceTableLineItem.tooltip": "This microservice instance does not have metrics to display.",
                  "explorer.selectMetric": "Select a metric to display",
                  "fabric.capability": "Capability",
                  "fabric.error": "No Services Found",
                  "fabric.name": "Name",
                  "fabric.none": "None",
                  "fabric.owner": "Owner",
                  "fabric.searchPlaceholder": "Search Services",
                  "fabric.status": "Status",
                  "fabricHeaderContent.allServices": "All Services",
                  "fabricHeaderContent.down": "Down",
                  "fabricHeaderContent.services": "Services",
                  "fabricHeaderContent.stable": "Stable",
                  "fabricHeaderContent.summary": "Summary",
                  "fabricHeaderContent.warning": "Warning",
                  "fabricMicroservices.disableFetchError": "Automatically disabling the fetching of Fabric microservices after three attempts.",
                  "fabricMicroservices.fetchError": "Fetching Fabric Microservices failed",
                  "fabricRouter.noInstance": "{instanceID} is not a known instance of {serviceName} {serviceVersion}",
                  "fabricRouter.noMetrics": "{serviceName} {serviceVersion} does not have metrics to display",
                  "fabricRouter.noService": "{serviceSlug} is not a known microservice",
                  "fabricRouter.notAuthorized": "You are not authorized to view {serviceName} {serviceVersion}",
                  "footer.copyright": "Copyright &copy; 2018 Decipher Technology Studios. All rights reserved. <br /> Copyright &copy; 2018 Grey Matter, a Decipher Technology Studios product. All rights reserved.",
                  "functionsGrid.error": "No Functions Found",
                  "functionsGrid.errorPercent": "Error %",
                  "functionsGrid.function": "Function",
                  "functionsGrid.latency50": "Latency 50%",
                  "functionsGrid.latency99": "Latency 99%",
                  "functionsGrid.requests": "Requests",
                  "functionsGrid.searchPlaceholder": "Search Functions",
                  "goHeaderContent.explorer": "Explorer",
                  "goHeaderContent.functions": "Functions",
                  "goHeaderContent.requests": "Requests",
                  "goHeaderContent.routes": "Routes",
                  "goHeaderContent.summary": "Summary",
                  "goHeaderContent.uptime": "Uptime",
                  "inspector.hideStaticMetric": "Hide all static metrics",
                  "inspector.hideZeroMetric": "Hide all metrics with only zero values",
                  "inspector.searchAriaLabel": "Search All Metrics",
                  "inspector.searchPlaceholder": "Search",
                  "instanceMetricsUtils.disableFetchError": "Automatically disabling the fetching of metrics after three attempts. You can turn polling back on in Settings.",
                  "instanceMetricsUtils.fetchError": "Fetching Metrics failed",
                  "jvmHeaderContent.explorer": "Explorer",
                  "jvmHeaderContent.requests": "Requests",
                  "jvmHeaderContent.routes": "Routes",
                  "jvmHeaderContent.summary": "Summary",
                  "jvmHeaderContent.threads": "Threads",
                  "jvmHeaderContent.uptime": "Uptime",
                  "languageSelector.languages": "Languages",
                  "pollingSettings.button.pause": "Pause Polling",
                  "pollingSettings.button.resume": "Resume Polling",
                  "pollingSettings.pollingIntervals": "Polling Interval(s)",
                  "routesGrid.error": "No Routes Found",
                  "routesGrid.errorPercent": "Error %",
                  "routesGrid.latency50": "Latency 50%",
                  "routesGrid.latency99": "Latency 99%",
                  "routesGrid.requests": "Requests",
                  "routesGrid.route": "Route",
                  "routesGrid.searchPlaceholder": "Search Routes",
                  "serviceHeaderContent.instances": "Instances",
                  "serviceView.error": "No Instances Found",
                  "serviceView.name": "Name",
                  "serviceView.searchPlaceholder": "Search Instances",
                  "serviceView.uptime": "Uptime",
                  "settingsGrid.cacheSize": "Cache Size",
                  "settingsGrid.clearCache": "Clear Cache",
                  "settingsGrid.fabricPolling": "Fabric Polling",
                  "settingsGrid.instancePolling": "Instance Polling",
                  "settingsGrid.metricsCache": "Metrics Cache",
                  "settingsGrid.modal.question": "Are you sure that you want to clear the cached metrics data?",
                  "settingsGrid.modal.secondary": "This action cannot be undone.",
                  "settingsGrid.polling": "Polling",
                  "settingsGrid.tooltip": "Select an instance to turn on polling",
                  "summary.errorRate": "Error Rate",
                  "summary.hostCPUCores": "Host CPU Cores",
                  "summary.hostCPUUsage": "Host CPU Utilized",
                  "summary.hostCPUUsageDetail": "{count, plural, one {# Core on Host} other {#  Cores on Host}}",
                  "summary.memoryUsage": "Memory Utilized",
                  "summary.memoryUsageDetail": "{hostMemoryAvail} Free on Host",
                  "summary.requestsPerSecond": "Requests Per Second",
                  "summary.responseTime": "Avg. Response Time",
                  "summary.statistics": "Statistics",
                  "summary.uptime": "Uptime",
                  "summary.vitals": "Vitals",
                  "table.errorPercent": "Error %",
                  "table.function": "Function",
                  "table.instance": "Instance",
                  "table.latency": "Latency",
                  "table.requests": "Requests",
                  "table.requestsSec": "Requests/sec",
                  "table.route": "Route",
                  "table.uptime": "Uptime",
                  "tableColLatencyHeader.latency": "Latency",
                  "tableColLatencyHeader.latency50": "50%",
                  "tableColLatencyHeader.latency99": "99%",
                  "tableColLatencyHeader.tooltip": "Latency 50% refers to the average latency of the 50% percentile, while Latency 99% is the average latency for the slowest 1% of responses, also known as tail latency.",
                  "tableLineItem.requests": "Requests over Time for {item}",
                  "tableToolbar.cards": "Cards",
                  "tableToolbar.group": "Group",
                  "tableToolbar.list": "List",
                  "tableToolbar.sort": "Sort",
                  "threadsGrid.errorFetchFail": "Failed to Fetch Threads",
                  "threadsGrid.errorNotFound": "No Threads Found",
                  "threadsGrid.id": "ID",
                  "threadsGrid.name": "Name",
                  "threadsGrid.none": "None",
                  "threadsGrid.searchPlaceholder": "Search Threads",
                  "threadsGrid.state": "State",
                  "threadsTableHeader.daemon": "Daemon",
                  "threadsTableHeader.id": "ID",
                  "threadsTableHeader.name": "Name",
                  "threadsTableHeader.priority": "Priority",
                  "threadsTableHeader.state": "State",
                },
                "now": [Function],
                "textComponent": "span",
              }
            }
            isPolling={true}
            startPolling={[Function]}
            stopPolling={[Function]}
            title="Fabric Polling"
          >
            <LayoutSection
              flex={true}
              icon="Fabric"
              title="Fabric Polling"
            >
              <styled.section>
                <section
                  className="c1"
                >
                  <styled.header>
                    <header
                      className="c2"
                    >
                      <styled.span>
                        <span
                          className="c3"
                        >
                          <Icon>
                            <styled.svg
                              aria-labelledby="ariaLabelledby"
                              focusable="false"
                              glyphColor="currentColor"
                              iconRatio="1"
                            >
                              <svg
                                aria-labelledby="ariaLabelledby"
                                className="c4"
                                focusable="false"
                                version="1.1"
                                viewBox="0 0 24 24"
                                xmlns="http://www.w3.org/2000/svg"
                                xmlnsXlink="http://www.w3.org/1999/xlink"
                              >
                                <styled.g
                                  ratio={1}
                                  title=""
                                >
                                  <g
                                    className="c5"
                                    fill="currentColor"
                                    title=""
                                  >
                                    <title />
                                    <Glyph
                                      glyphColor="currentColor"
                                      name="Fabric"
                                      ratio={1}
                                    >
                                      <g
                                        className="glyph"
                                        fill="currentColor"
                                        transform="translate(0 0) scale(1)"
                                      >
                                        <Fabric>
                                          <path
                                            d="M10.4915289,10.6867475 C10.8581835,10.2659432 11.3980346,10 12,10 C13.1045695,10 14,10.8954305 14,12 C14,12.149429 13.9836124,12.2950305 13.9525363,12.4351054 L16.4807554,13.6992149 C16.8475649,13.2712029 17.3921111,13 18,13 C19.1045695,13 20,13.8954305 20,15 C20,16.1045695 19.1045695,17 18,17 C16.8954305,17 16,16.1045695 16,15 C16,14.8620114 16.0139744,14.7272866 16.0405851,14.5971638 L13.4975725,13.3256575 C13.1311622,13.7392765 12.5960287,14 12,14 C10.8954305,14 10,13.1045695 10,12 C10,11.8562885 10.0151576,11.7161172 10.0439612,11.5809976 L7.50847107,10.3132525 C7.14181648,10.7340568 6.60196542,11 6,11 C4.8954305,11 4,10.1045695 4,9 C4,7.8954305 4.8954305,7 6,7 C7.1045695,7 8,7.8954305 8,9 C8,9.14371154 7.98484245,9.28388284 7.95603883,9.41900242 L10.4915289,10.6867475 Z M10.0405851,17.5971638 L7.49757253,16.3256575 C7.13116215,16.7392765 6.59602869,17 6,17 C4.8954305,17 4,16.1045695 4,15 C4,13.8954305 4.8954305,13 6,13 C7.1045695,13 8,13.8954305 8,15 C8,15.149429 7.98361238,15.2950305 7.95253631,15.4351054 L10.4807554,16.6992149 C10.8475649,16.2712029 11.3921111,16 12,16 C13.1045695,16 14,16.8954305 14,18 C14,19.1045695 13.1045695,20 12,20 C10.8954305,20 10,19.1045695 10,18 C10,17.8620114 10.0139744,17.7272866 10.0405851,17.5971638 Z M16.0439612,8.58099758 L13.5084711,7.31325253 C13.1418165,7.73405681 12.6019654,8 12,8 C10.8954305,8 10,7.1045695 10,6 C10,4.8954305 10.8954305,4 12,4 C13.1045695,4 14,4.8954305 14,6 C14,6.14371154 13.9848424,6.28388284 13.9560388,6.41900242 L16.4915289,7.68674747 C16.8581835,7.26594319 17.3980346,7 18,7 C19.1045695,7 20,7.8954305 20,9 C20,10.1045695 19.1045695,11 18,11 C16.8954305,11 16,10.1045695 16,9 C16,8.85628846 16.0151576,8.71611716 16.0439612,8.58099758 Z"
                                            id="Combined-Shape"
                                          />
                                        </Fabric>
                                      </g>
                                    </Glyph>
                                  </g>
                                </styled.g>
                              </svg>
                            </styled.svg>
                          </Icon>
                        </span>
                      </styled.span>
                      <styled.h3>
                        <h3
                          className="c6"
                        >
                          Fabric Polling
                        </h3>
                      </styled.h3>
                    </header>
                  </styled.header>
                  <styled.div
                    flex={true}
                  >
                    <div
                      className="c7"
                    >
                      <Tooltip
                        containerStyle={
                          Object {
                            "border": "none",
                          }
                        }
                        contentStyle={
                          Object {
                            "top": "0px",
                          }
                        }
                        disabled={true}
                        position="left"
                      >
                        <styled.div
                          disabled={true}
                          style={
                            Object {
                              "border": "none",
                            }
                          }
                        >
                          <div
                            className="c8"
                            disabled={true}
                            style={
                              Object {
                                "border": "none",
                              }
                            }
                          >
                            <styled.div
                              isDisabled={false}
                            >
                              <div
                                className="c9"
                              >
                                <Button
                                  clickAction={[Function]}
                                  disabled={false}
                                  glyph="Pause"
                                  glyphColor="rgb(10, 171, 42)"
                                  glyphRatio={3}
                                  label="Pause Polling"
                                  labelStyle={
                                    Object {
                                      "bottom": "10px",
                                      "fontSize": "14px",
                                      "left": "0px",
                                      "position": "absolute",
                                      "width": "100%",
                                    }
                                  }
                                  orientation="vertical"
                                  outline="raised"
                                  size="xl"
                                  style={
                                    Object {
                                      "height": "100%",
                                      "position": "relative",
                                      "width": "100%",
                                      "zIndex": 0,
                                    }
                                  }
                                  tabIndex={0}
                                  type="polling"
                                >
                                  <styled.button
                                    disabled={false}
                                    onClick={[Function]}
                                    orientation="vertical"
                                    outline="raised"
                                    size="xl"
                                    style={
                                      Object {
                                        "height": "100%",
                                        "position": "relative",
                                        "width": "100%",
                                        "zIndex": 0,
                                      }
                                    }
                                    tabIndex={0}
                                    title="Pause Polling"
                                    type="polling"
                                  >
                                    <button
                                      className="c10"
                                      disabled={false}
                                      onClick={[Function]}
                                      orientation="vertical"
                                      size="xl"
                                      style={
                                        Object {
                                          "height": "100%",
                                          "position": "relative",
                                          "width": "100%",
                                          "zIndex": 0,
                                        }
                                      }
                                      tabIndex={0}
                                      title="Pause Polling"
                                      type="polling"
                                    >
                                      <Icon>
                                        <styled.svg
                                          aria-labelledby="ariaLabelledby"
                                          focusable="false"
                                          glyphColor="currentColor"
                                          iconRatio="1"
                                        >
                                          <svg
                                            aria-labelledby="ariaLabelledby"
                                            className="c4"
                                            focusable="false"
                                            version="1.1"
                                            viewBox="0 0 24 24"
                                            xmlns="http://www.w3.org/2000/svg"
                                            xmlnsXlink="http://www.w3.org/1999/xlink"
                                          >
                                            <styled.g
                                              ratio={1}
                                              title=""
                                            >
                                              <g
                                                className="c5"
                                                fill="currentColor"
                                                title=""
                                              >
                                                <title />
                                                <Glyph
                                                  glyphColor="rgb(10, 171, 42)"
                                                  name="Pause"
                                                  ratio={3}
                                                >
                                                  <g
                                                    className="glyph"
                                                    fill="rgb(10, 171, 42)"
                                                    transform="translate(-24 -24) scale(3)"
                                                  >
                                                    <Pause>
                                                      <path
                                                        d="M6,5 L10.6153846,5 L10.6153846,19 L6,19 L6,5 Z M13.3846154,5 L18,5 L18,19 L13.3846154,19 L13.3846154,5 Z"
                                                        id="Combined-Shape"
                                                      />
                                                    </Pause>
                                                  </g>
                                                </Glyph>
                                              </g>
                                            </styled.g>
                                          </svg>
                                        </styled.svg>
                                      </Icon>
                                      <span
                                        style={
                                          Object {
                                            "bottom": "10px",
                                            "fontSize": "14px",
                                            "left": "0px",
                                            "position": "absolute",
                                            "width": "100%",
                                          }
                                        }
                                      >
                                        Pause Polling
                                      </span>
                                    </button>
                                  </styled.button>
                                </Button>
                              </div>
                            </styled.div>
                            <styled.div
                              position="left"
                              style={
                                Object {
                                  "top": "0px",
                                }
                              }
                            >
                              <div
                                className="c11"
                                style={
                                  Object {
                                    "top": "0px",
                                  }
                                }
                              />
                            </styled.div>
                          </div>
                        </styled.div>
                      </Tooltip>
                      <styled.div
                        id="ctrl-slider-Fabric Polling"
                        isDisabled={false}
                      >
                        <div
                          className="c12"
                          id="ctrl-slider-Fabric Polling"
                        >
                          <InputRange
                            allowSameValues={false}
                            aria-labelledby="polling interval-name"
                            classNames={
                              Object {
                                "activeTrack": "input-range__track input-range__track--active",
                                "disabledInputRange": "input-range input-range--disabled",
                                "inputRange": "input-range",
                                "labelContainer": "input-range__label-container",
                                "maxLabel": "input-range__label input-range__label--max",
                                "minLabel": "input-range__label input-range__label--min",
                                "slider": "input-range__slider",
                                "sliderContainer": "input-range__slider-container",
                                "track": "input-range__track input-range__track--background",
                                "valueLabel": "input-range__label input-range__label--value",
                              }
                            }
                            disabled={false}
                            maxValue={120}
                            minValue={5}
                            onChange={[Function]}
                            step={1}
                            value={10}
                          >
                            <div
                              aria-disabled={false}
                              className="input-range"
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onTouchStart={[Function]}
                            >
                              <Label
                                classNames={
                                  Object {
                                    "activeTrack": "input-range__track input-range__track--active",
                                    "disabledInputRange": "input-range input-range--disabled",
                                    "inputRange": "input-range",
                                    "labelContainer": "input-range__label-container",
                                    "maxLabel": "input-range__label input-range__label--max",
                                    "minLabel": "input-range__label input-range__label--min",
                                    "slider": "input-range__slider",
                                    "sliderContainer": "input-range__slider-container",
                                    "track": "input-range__track input-range__track--background",
                                    "valueLabel": "input-range__label input-range__label--value",
                                  }
                                }
                                type="min"
                              >
                                <span
                                  className="input-range__label input-range__label--min"
                                >
                                  <span
                                    className="input-range__label-container"
                                  >
                                    5
                                  </span>
                                </span>
                              </Label>
                              <Track
                                classNames={
                                  Object {
                                    "activeTrack": "input-range__track input-range__track--active",
                                    "disabledInputRange": "input-range input-range--disabled",
                                    "inputRange": "input-range",
                                    "labelContainer": "input-range__label-container",
                                    "maxLabel": "input-range__label input-range__label--max",
                                    "minLabel": "input-range__label input-range__label--min",
                                    "slider": "input-range__slider",
                                    "sliderContainer": "input-range__slider-container",
                                    "track": "input-range__track input-range__track--background",
                                    "valueLabel": "input-range__label input-range__label--value",
                                  }
                                }
                                onTrackDrag={[Function]}
                                onTrackMouseDown={[Function]}
                                percentages={
                                  Object {
                                    "max": 0.043478260869565216,
                                    "min": 0,
                                  }
                                }
                              >
                                <div
                                  className="input-range__track input-range__track--background"
                                  onMouseDown={[Function]}
                                  onTouchStart={[Function]}
                                >
                                  <div
                                    className="input-range__track input-range__track--active"
                                    style={
                                      Object {
                                        "left": "0%",
                                        "width": "4.3478260869565215%",
                                      }
                                    }
                                  />
                                  <Slider
                                    classNames={
                                      Object {
                                        "activeTrack": "input-range__track input-range__track--active",
                                        "disabledInputRange": "input-range input-range--disabled",
                                        "inputRange": "input-range",
                                        "labelContainer": "input-range__label-container",
                                        "maxLabel": "input-range__label input-range__label--max",
                                        "minLabel": "input-range__label input-range__label--min",
                                        "slider": "input-range__slider",
                                        "sliderContainer": "input-range__slider-container",
                                        "track": "input-range__track input-range__track--background",
                                        "valueLabel": "input-range__label input-range__label--value",
                                      }
                                    }
                                    key="max"
                                    maxValue={120}
                                    minValue={5}
                                    onSliderDrag={[Function]}
                                    onSliderKeyDown={[Function]}
                                    percentage={0.043478260869565216}
                                    type="max"
                                    value={10}
                                  >
                                    <span
                                      className="input-range__slider-container"
                                      style={
                                        Object {
                                          "left": "4.3478260869565215%",
                                          "position": "absolute",
                                        }
                                      }
                                    >
                                      <Label
                                        classNames={
                                          Object {
                                            "activeTrack": "input-range__track input-range__track--active",
                                            "disabledInputRange": "input-range input-range--disabled",
                                            "inputRange": "input-range",
                                            "labelContainer": "input-range__label-container",
                                            "maxLabel": "input-range__label input-range__label--max",
                                            "minLabel": "input-range__label input-range__label--min",
                                            "slider": "input-range__slider",
                                            "sliderContainer": "input-range__slider-container",
                                            "track": "input-range__track input-range__track--background",
                                            "valueLabel": "input-range__label input-range__label--value",
                                          }
                                        }
                                        type="value"
                                      >
                                        <span
                                          className="input-range__label input-range__label--value"
                                        >
                                          <span
                                            className="input-range__label-container"
                                          >
                                            10
                                          </span>
                                        </span>
                                      </Label>
                                      <div
                                        aria-valuemax={120}
                                        aria-valuemin={5}
                                        aria-valuenow={10}
                                        className="input-range__slider"
                                        draggable="false"
                                        onKeyDown={[Function]}
                                        onMouseDown={[Function]}
                                        onTouchStart={[Function]}
                                        role="slider"
                                        tabIndex="0"
                                      />
                                    </span>
                                  </Slider>
                                </div>
                              </Track>
                              <Label
                                classNames={
                                  Object {
                                    "activeTrack": "input-range__track input-range__track--active",
                                    "disabledInputRange": "input-range input-range--disabled",
                                    "inputRange": "input-range",
                                    "labelContainer": "input-range__label-container",
                                    "maxLabel": "input-range__label input-range__label--max",
                                    "minLabel": "input-range__label input-range__label--min",
                                    "slider": "input-range__slider",
                                    "sliderContainer": "input-range__slider-container",
                                    "track": "input-range__track input-range__track--background",
                                    "valueLabel": "input-range__label input-range__label--value",
                                  }
                                }
                                type="max"
                              >
                                <span
                                  className="input-range__label input-range__label--max"
                                >
                                  <span
                                    className="input-range__label-container"
                                  >
                                    120
                                  </span>
                                </span>
                              </Label>
                            </div>
                          </InputRange>
                          <span
                            className="label"
                            id="interval-name-Fabric Polling"
                          >
                            Polling Interval(s)
                          </span>
                        </div>
                      </styled.div>
                    </div>
                  </styled.div>
                </section>
              </styled.section>
            </LayoutSection>
          </PollingSettings>
        </InjectIntl(PollingSettings)>
        <InjectIntl(PollingSettings)
          changePollingInterval={[Function]}
          glyph="ServiceInstance"
          interval={10000}
          isDisabled={true}
          isPolling={false}
          startPolling={[Function]}
          stopPolling={[Function]}
          title="Instance Polling"
          tooltipContent="Select an instance to turn on polling"
        >
          <PollingSettings
            changePollingInterval={[Function]}
            glyph="ServiceInstance"
            interval={10000}
            intl={
              Object {
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en-US",
                "messages": Object {
                  "GMLineChart.noChartableData": "No Chartable Data",
                  "GMLineChart.noMetricsFound": "Could not find the following metrics:",
                  "GMLineChart.screenReaderGraphDescription.noData": "The average for currently displayed data is equal to 0.",
                  "GMLineChart.screenReaderGraphDescription.withData": "A tabular representation of the {title} chart data: median {median} average {average} mode {mode} maximum {max} minimum {min} number of observations {dataPoints} complete data time series follows {timeSeries}",
                  "GMServiceTableLineItem.tooltip": "This microservice instance does not have metrics to display.",
                  "explorer.selectMetric": "Select a metric to display",
                  "fabric.capability": "Capability",
                  "fabric.error": "No Services Found",
                  "fabric.name": "Name",
                  "fabric.none": "None",
                  "fabric.owner": "Owner",
                  "fabric.searchPlaceholder": "Search Services",
                  "fabric.status": "Status",
                  "fabricHeaderContent.allServices": "All Services",
                  "fabricHeaderContent.down": "Down",
                  "fabricHeaderContent.services": "Services",
                  "fabricHeaderContent.stable": "Stable",
                  "fabricHeaderContent.summary": "Summary",
                  "fabricHeaderContent.warning": "Warning",
                  "fabricMicroservices.disableFetchError": "Automatically disabling the fetching of Fabric microservices after three attempts.",
                  "fabricMicroservices.fetchError": "Fetching Fabric Microservices failed",
                  "fabricRouter.noInstance": "{instanceID} is not a known instance of {serviceName} {serviceVersion}",
                  "fabricRouter.noMetrics": "{serviceName} {serviceVersion} does not have metrics to display",
                  "fabricRouter.noService": "{serviceSlug} is not a known microservice",
                  "fabricRouter.notAuthorized": "You are not authorized to view {serviceName} {serviceVersion}",
                  "footer.copyright": "Copyright &copy; 2018 Decipher Technology Studios. All rights reserved. <br /> Copyright &copy; 2018 Grey Matter, a Decipher Technology Studios product. All rights reserved.",
                  "functionsGrid.error": "No Functions Found",
                  "functionsGrid.errorPercent": "Error %",
                  "functionsGrid.function": "Function",
                  "functionsGrid.latency50": "Latency 50%",
                  "functionsGrid.latency99": "Latency 99%",
                  "functionsGrid.requests": "Requests",
                  "functionsGrid.searchPlaceholder": "Search Functions",
                  "goHeaderContent.explorer": "Explorer",
                  "goHeaderContent.functions": "Functions",
                  "goHeaderContent.requests": "Requests",
                  "goHeaderContent.routes": "Routes",
                  "goHeaderContent.summary": "Summary",
                  "goHeaderContent.uptime": "Uptime",
                  "inspector.hideStaticMetric": "Hide all static metrics",
                  "inspector.hideZeroMetric": "Hide all metrics with only zero values",
                  "inspector.searchAriaLabel": "Search All Metrics",
                  "inspector.searchPlaceholder": "Search",
                  "instanceMetricsUtils.disableFetchError": "Automatically disabling the fetching of metrics after three attempts. You can turn polling back on in Settings.",
                  "instanceMetricsUtils.fetchError": "Fetching Metrics failed",
                  "jvmHeaderContent.explorer": "Explorer",
                  "jvmHeaderContent.requests": "Requests",
                  "jvmHeaderContent.routes": "Routes",
                  "jvmHeaderContent.summary": "Summary",
                  "jvmHeaderContent.threads": "Threads",
                  "jvmHeaderContent.uptime": "Uptime",
                  "languageSelector.languages": "Languages",
                  "pollingSettings.button.pause": "Pause Polling",
                  "pollingSettings.button.resume": "Resume Polling",
                  "pollingSettings.pollingIntervals": "Polling Interval(s)",
                  "routesGrid.error": "No Routes Found",
                  "routesGrid.errorPercent": "Error %",
                  "routesGrid.latency50": "Latency 50%",
                  "routesGrid.latency99": "Latency 99%",
                  "routesGrid.requests": "Requests",
                  "routesGrid.route": "Route",
                  "routesGrid.searchPlaceholder": "Search Routes",
                  "serviceHeaderContent.instances": "Instances",
                  "serviceView.error": "No Instances Found",
                  "serviceView.name": "Name",
                  "serviceView.searchPlaceholder": "Search Instances",
                  "serviceView.uptime": "Uptime",
                  "settingsGrid.cacheSize": "Cache Size",
                  "settingsGrid.clearCache": "Clear Cache",
                  "settingsGrid.fabricPolling": "Fabric Polling",
                  "settingsGrid.instancePolling": "Instance Polling",
                  "settingsGrid.metricsCache": "Metrics Cache",
                  "settingsGrid.modal.question": "Are you sure that you want to clear the cached metrics data?",
                  "settingsGrid.modal.secondary": "This action cannot be undone.",
                  "settingsGrid.polling": "Polling",
                  "settingsGrid.tooltip": "Select an instance to turn on polling",
                  "summary.errorRate": "Error Rate",
                  "summary.hostCPUCores": "Host CPU Cores",
                  "summary.hostCPUUsage": "Host CPU Utilized",
                  "summary.hostCPUUsageDetail": "{count, plural, one {# Core on Host} other {#  Cores on Host}}",
                  "summary.memoryUsage": "Memory Utilized",
                  "summary.memoryUsageDetail": "{hostMemoryAvail} Free on Host",
                  "summary.requestsPerSecond": "Requests Per Second",
                  "summary.responseTime": "Avg. Response Time",
                  "summary.statistics": "Statistics",
                  "summary.uptime": "Uptime",
                  "summary.vitals": "Vitals",
                  "table.errorPercent": "Error %",
                  "table.function": "Function",
                  "table.instance": "Instance",
                  "table.latency": "Latency",
                  "table.requests": "Requests",
                  "table.requestsSec": "Requests/sec",
                  "table.route": "Route",
                  "table.uptime": "Uptime",
                  "tableColLatencyHeader.latency": "Latency",
                  "tableColLatencyHeader.latency50": "50%",
                  "tableColLatencyHeader.latency99": "99%",
                  "tableColLatencyHeader.tooltip": "Latency 50% refers to the average latency of the 50% percentile, while Latency 99% is the average latency for the slowest 1% of responses, also known as tail latency.",
                  "tableLineItem.requests": "Requests over Time for {item}",
                  "tableToolbar.cards": "Cards",
                  "tableToolbar.group": "Group",
                  "tableToolbar.list": "List",
                  "tableToolbar.sort": "Sort",
                  "threadsGrid.errorFetchFail": "Failed to Fetch Threads",
                  "threadsGrid.errorNotFound": "No Threads Found",
                  "threadsGrid.id": "ID",
                  "threadsGrid.name": "Name",
                  "threadsGrid.none": "None",
                  "threadsGrid.searchPlaceholder": "Search Threads",
                  "threadsGrid.state": "State",
                  "threadsTableHeader.daemon": "Daemon",
                  "threadsTableHeader.id": "ID",
                  "threadsTableHeader.name": "Name",
                  "threadsTableHeader.priority": "Priority",
                  "threadsTableHeader.state": "State",
                },
                "now": [Function],
                "textComponent": "span",
              }
            }
            isDisabled={true}
            isPolling={false}
            startPolling={[Function]}
            stopPolling={[Function]}
            title="Instance Polling"
            tooltipContent="Select an instance to turn on polling"
          >
            <LayoutSection
              flex={true}
              icon="ServiceInstance"
              title="Instance Polling"
            >
              <styled.section>
                <section
                  className="c1"
                >
                  <styled.header>
                    <header
                      className="c2"
                    >
                      <styled.span>
                        <span
                          className="c3"
                        >
                          <Icon>
                            <styled.svg
                              aria-labelledby="ariaLabelledby"
                              focusable="false"
                              glyphColor="currentColor"
                              iconRatio="1"
                            >
                              <svg
                                aria-labelledby="ariaLabelledby"
                                className="c4"
                                focusable="false"
                                version="1.1"
                                viewBox="0 0 24 24"
                                xmlns="http://www.w3.org/2000/svg"
                                xmlnsXlink="http://www.w3.org/1999/xlink"
                              >
                                <styled.g
                                  ratio={1}
                                  title=""
                                >
                                  <g
                                    className="c5"
                                    fill="currentColor"
                                    title=""
                                  >
                                    <title />
                                    <Glyph
                                      glyphColor="currentColor"
                                      name="ServiceInstance"
                                      ratio={1}
                                    >
                                      <g
                                        className="glyph"
                                        fill="currentColor"
                                        transform="translate(0 0) scale(1)"
                                      >
                                        <ServiceInstance>
                                          <path
                                            d="M6.19728719,10.4682661 L3.58689267,10.0076082 C3.3149522,9.95961873 3.05559772,10.1411669 3.00760822,10.4131073 C2.95961873,10.6850478 3.14116686,10.9444023 3.41310733,10.9923918 L6.02457766,11.4532395 C6.05503334,11.1160942 6.11337821,10.7869947 6.19728719,10.4682661 Z M17.9754223,12.5467605 L20.5868927,13.0076082 C20.8588331,13.0555977 21.0403813,13.3149522 20.9923918,13.5868927 C20.9444023,13.8588331 20.6850478,14.0403813 20.4131073,13.9923918 L17.8027128,13.5317339 C17.8866218,13.2130053 17.9449667,12.8839058 17.9754223,12.5467605 Z M7,12 C7,9.23857625 9.23857625,7 12,7 C14.7614237,7 17,9.23857625 17,12 C17,14.7614237 14.7614237,17 12,17 C9.23857625,17 7,14.7614237 7,12 Z M16.0107373,12.4288082 L16.0107373,11.5125591 L14.8991901,11.1460594 L14.641357,10.5218647 L15.145564,9.46817824 L14.4981164,8.82107731 L13.4610543,9.34219399 L12.8365252,9.08449893 L12.4411811,7.985 L11.5244411,7.985 L11.1634748,9.09595204 L10.5274865,9.3536471 L9.4732355,8.84971009 L8.82578791,9.49681102 L9.34718376,10.5333178 L9.08935065,11.1575125 L7.98926271,11.5469184 L7.98926271,12.4574409 L9.1008099,12.8239406 L9.35864301,13.4481353 L8.85443604,14.5018218 L9.50188363,15.1489227 L10.5389457,14.627806 L11.1634748,14.8855011 L11.5588189,15.985 L12.4698292,15.985 L12.8307956,14.874048 L13.4667839,14.6163529 L14.5210349,15.1202899 L15.1684825,14.473189 L14.641357,13.4366822 L14.9106494,12.8124875 L16.0107373,12.417355 L16.0107373,12.4288082 Z M12,13.7058304 C11.0488823,13.7058304 10.2811126,12.9384717 10.2811126,11.9878633 C10.2811126,11.0372548 11.0488823,10.2698962 12,10.2698962 C12.9511177,10.2698962 13.7188874,11.0372548 13.7188874,11.9878633 C13.7188874,12.9384717 12.9511177,13.7058304 12,13.7058304 Z"
                                            id="Combined-Shape"
                                          />
                                        </ServiceInstance>
                                      </g>
                                    </Glyph>
                                  </g>
                                </styled.g>
                              </svg>
                            </styled.svg>
                          </Icon>
                        </span>
                      </styled.span>
                      <styled.h3>
                        <h3
                          className="c6"
                        >
                          Instance Polling
                        </h3>
                      </styled.h3>
                    </header>
                  </styled.header>
                  <styled.div
                    flex={true}
                  >
                    <div
                      className="c7"
                    >
                      <Tooltip
                        containerStyle={
                          Object {
                            "border": "none",
                          }
                        }
                        content="Select an instance to turn on polling"
                        contentStyle={
                          Object {
                            "top": "0px",
                          }
                        }
                        disabled={false}
                        position="left"
                      >
                        <styled.div
                          disabled={false}
                          style={
                            Object {
                              "border": "none",
                            }
                          }
                        >
                          <div
                            className="c13"
                            disabled={false}
                            style={
                              Object {
                                "border": "none",
                              }
                            }
                          >
                            <styled.div
                              isDisabled={true}
                            >
                              <div
                                className="c14"
                              >
                                <Button
                                  clickAction={[Function]}
                                  disabled={true}
                                  glyph="Play"
                                  glyphColor="rgb(77, 77, 77)"
                                  glyphRatio={3}
                                  label="Resume Polling"
                                  labelStyle={
                                    Object {
                                      "bottom": "10px",
                                      "fontSize": "14px",
                                      "left": "0px",
                                      "position": "absolute",
                                      "width": "100%",
                                    }
                                  }
                                  orientation="vertical"
                                  outline="raised"
                                  size="xl"
                                  style={
                                    Object {
                                      "height": "100%",
                                      "position": "relative",
                                      "width": "100%",
                                      "zIndex": 0,
                                    }
                                  }
                                  tabIndex={0}
                                  type="polling"
                                >
                                  <styled.button
                                    disabled={true}
                                    onClick={[Function]}
                                    orientation="vertical"
                                    outline="raised"
                                    size="xl"
                                    style={
                                      Object {
                                        "height": "100%",
                                        "position": "relative",
                                        "width": "100%",
                                        "zIndex": 0,
                                      }
                                    }
                                    tabIndex={0}
                                    title="Resume Polling"
                                    type="polling"
                                  >
                                    <button
                                      className="c10"
                                      disabled={true}
                                      onClick={[Function]}
                                      orientation="vertical"
                                      size="xl"
                                      style={
                                        Object {
                                          "height": "100%",
                                          "position": "relative",
                                          "width": "100%",
                                          "zIndex": 0,
                                        }
                                      }
                                      tabIndex={0}
                                      title="Resume Polling"
                                      type="polling"
                                    >
                                      <Icon>
                                        <styled.svg
                                          aria-labelledby="ariaLabelledby"
                                          focusable="false"
                                          glyphColor="currentColor"
                                          iconRatio="1"
                                        >
                                          <svg
                                            aria-labelledby="ariaLabelledby"
                                            className="c4"
                                            focusable="false"
                                            version="1.1"
                                            viewBox="0 0 24 24"
                                            xmlns="http://www.w3.org/2000/svg"
                                            xmlnsXlink="http://www.w3.org/1999/xlink"
                                          >
                                            <styled.g
                                              ratio={1}
                                              title=""
                                            >
                                              <g
                                                className="c5"
                                                fill="currentColor"
                                                title=""
                                              >
                                                <title />
                                                <Glyph
                                                  glyphColor="rgb(77, 77, 77)"
                                                  name="Play"
                                                  ratio={3}
                                                >
                                                  <g
                                                    className="glyph"
                                                    fill="rgb(77, 77, 77)"
                                                    transform="translate(-24 -24) scale(3)"
                                                  >
                                                    <Play>
                                                      <polygon
                                                        id="Triangle-6"
                                                        points="19 12 7 20 7 4"
                                                      />
                                                    </Play>
                                                  </g>
                                                </Glyph>
                                              </g>
                                            </styled.g>
                                          </svg>
                                        </styled.svg>
                                      </Icon>
                                      <span
                                        style={
                                          Object {
                                            "bottom": "10px",
                                            "fontSize": "14px",
                                            "left": "0px",
                                            "position": "absolute",
                                            "width": "100%",
                                          }
                                        }
                                      >
                                        Resume Polling
                                      </span>
                                    </button>
                                  </styled.button>
                                </Button>
                              </div>
                            </styled.div>
                            <styled.div
                              position="left"
                              style={
                                Object {
                                  "top": "0px",
                                }
                              }
                            >
                              <div
                                className="c11"
                                style={
                                  Object {
                                    "top": "0px",
                                  }
                                }
                              >
                                Select an instance to turn on polling
                              </div>
                            </styled.div>
                          </div>
                        </styled.div>
                      </Tooltip>
                      <styled.div
                        id="ctrl-slider-Instance Polling"
                        isDisabled={true}
                      >
                        <div
                          className="c15"
                          id="ctrl-slider-Instance Polling"
                        >
                          <InputRange
                            allowSameValues={false}
                            aria-labelledby="polling interval-name"
                            classNames={
                              Object {
                                "activeTrack": "input-range__track input-range__track--active",
                                "disabledInputRange": "input-range input-range--disabled",
                                "inputRange": "input-range",
                                "labelContainer": "input-range__label-container",
                                "maxLabel": "input-range__label input-range__label--max",
                                "minLabel": "input-range__label input-range__label--min",
                                "slider": "input-range__slider",
                                "sliderContainer": "input-range__slider-container",
                                "track": "input-range__track input-range__track--background",
                                "valueLabel": "input-range__label input-range__label--value",
                              }
                            }
                            disabled={true}
                            maxValue={120}
                            minValue={5}
                            onChange={[Function]}
                            step={1}
                            value={10}
                          >
                            <div
                              aria-disabled={true}
                              className="input-range input-range--disabled"
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onTouchStart={[Function]}
                            >
                              <Label
                                classNames={
                                  Object {
                                    "activeTrack": "input-range__track input-range__track--active",
                                    "disabledInputRange": "input-range input-range--disabled",
                                    "inputRange": "input-range",
                                    "labelContainer": "input-range__label-container",
                                    "maxLabel": "input-range__label input-range__label--max",
                                    "minLabel": "input-range__label input-range__label--min",
                                    "slider": "input-range__slider",
                                    "sliderContainer": "input-range__slider-container",
                                    "track": "input-range__track input-range__track--background",
                                    "valueLabel": "input-range__label input-range__label--value",
                                  }
                                }
                                type="min"
                              >
                                <span
                                  className="input-range__label input-range__label--min"
                                >
                                  <span
                                    className="input-range__label-container"
                                  >
                                    5
                                  </span>
                                </span>
                              </Label>
                              <Track
                                classNames={
                                  Object {
                                    "activeTrack": "input-range__track input-range__track--active",
                                    "disabledInputRange": "input-range input-range--disabled",
                                    "inputRange": "input-range",
                                    "labelContainer": "input-range__label-container",
                                    "maxLabel": "input-range__label input-range__label--max",
                                    "minLabel": "input-range__label input-range__label--min",
                                    "slider": "input-range__slider",
                                    "sliderContainer": "input-range__slider-container",
                                    "track": "input-range__track input-range__track--background",
                                    "valueLabel": "input-range__label input-range__label--value",
                                  }
                                }
                                onTrackDrag={[Function]}
                                onTrackMouseDown={[Function]}
                                percentages={
                                  Object {
                                    "max": 0.043478260869565216,
                                    "min": 0,
                                  }
                                }
                              >
                                <div
                                  className="input-range__track input-range__track--background"
                                  onMouseDown={[Function]}
                                  onTouchStart={[Function]}
                                >
                                  <div
                                    className="input-range__track input-range__track--active"
                                    style={
                                      Object {
                                        "left": "0%",
                                        "width": "4.3478260869565215%",
                                      }
                                    }
                                  />
                                  <Slider
                                    classNames={
                                      Object {
                                        "activeTrack": "input-range__track input-range__track--active",
                                        "disabledInputRange": "input-range input-range--disabled",
                                        "inputRange": "input-range",
                                        "labelContainer": "input-range__label-container",
                                        "maxLabel": "input-range__label input-range__label--max",
                                        "minLabel": "input-range__label input-range__label--min",
                                        "slider": "input-range__slider",
                                        "sliderContainer": "input-range__slider-container",
                                        "track": "input-range__track input-range__track--background",
                                        "valueLabel": "input-range__label input-range__label--value",
                                      }
                                    }
                                    key="max"
                                    maxValue={120}
                                    minValue={5}
                                    onSliderDrag={[Function]}
                                    onSliderKeyDown={[Function]}
                                    percentage={0.043478260869565216}
                                    type="max"
                                    value={10}
                                  >
                                    <span
                                      className="input-range__slider-container"
                                      style={
                                        Object {
                                          "left": "4.3478260869565215%",
                                          "position": "absolute",
                                        }
                                      }
                                    >
                                      <Label
                                        classNames={
                                          Object {
                                            "activeTrack": "input-range__track input-range__track--active",
                                            "disabledInputRange": "input-range input-range--disabled",
                                            "inputRange": "input-range",
                                            "labelContainer": "input-range__label-container",
                                            "maxLabel": "input-range__label input-range__label--max",
                                            "minLabel": "input-range__label input-range__label--min",
                                            "slider": "input-range__slider",
                                            "sliderContainer": "input-range__slider-container",
                                            "track": "input-range__track input-range__track--background",
                                            "valueLabel": "input-range__label input-range__label--value",
                                          }
                                        }
                                        type="value"
                                      >
                                        <span
                                          className="input-range__label input-range__label--value"
                                        >
                                          <span
                                            className="input-range__label-container"
                                          >
                                            10
                                          </span>
                                        </span>
                                      </Label>
                                      <div
                                        aria-valuemax={120}
                                        aria-valuemin={5}
                                        aria-valuenow={10}
                                        className="input-range__slider"
                                        draggable="false"
                                        onKeyDown={[Function]}
                                        onMouseDown={[Function]}
                                        onTouchStart={[Function]}
                                        role="slider"
                                        tabIndex="0"
                                      />
                                    </span>
                                  </Slider>
                                </div>
                              </Track>
                              <Label
                                classNames={
                                  Object {
                                    "activeTrack": "input-range__track input-range__track--active",
                                    "disabledInputRange": "input-range input-range--disabled",
                                    "inputRange": "input-range",
                                    "labelContainer": "input-range__label-container",
                                    "maxLabel": "input-range__label input-range__label--max",
                                    "minLabel": "input-range__label input-range__label--min",
                                    "slider": "input-range__slider",
                                    "sliderContainer": "input-range__slider-container",
                                    "track": "input-range__track input-range__track--background",
                                    "valueLabel": "input-range__label input-range__label--value",
                                  }
                                }
                                type="max"
                              >
                                <span
                                  className="input-range__label input-range__label--max"
                                >
                                  <span
                                    className="input-range__label-container"
                                  >
                                    120
                                  </span>
                                </span>
                              </Label>
                            </div>
                          </InputRange>
                          <span
                            className="label"
                            id="interval-name-Instance Polling"
                          >
                            Polling Interval(s)
                          </span>
                        </div>
                      </styled.div>
                    </div>
                  </styled.div>
                </section>
              </styled.section>
            </LayoutSection>
          </PollingSettings>
        </InjectIntl(PollingSettings)>
        <LayoutSection
          flex={true}
          icon="Tape"
          title="Metrics Cache"
        >
          <styled.section>
            <section
              className="c1"
            >
              <styled.header>
                <header
                  className="c2"
                >
                  <styled.span>
                    <span
                      className="c3"
                    >
                      <Icon>
                        <styled.svg
                          aria-labelledby="ariaLabelledby"
                          focusable="false"
                          glyphColor="currentColor"
                          iconRatio="1"
                        >
                          <svg
                            aria-labelledby="ariaLabelledby"
                            className="c4"
                            focusable="false"
                            version="1.1"
                            viewBox="0 0 24 24"
                            xmlns="http://www.w3.org/2000/svg"
                            xmlnsXlink="http://www.w3.org/1999/xlink"
                          >
                            <styled.g
                              ratio={1}
                              title=""
                            >
                              <g
                                className="c5"
                                fill="currentColor"
                                title=""
                              >
                                <title />
                                <Glyph
                                  glyphColor="currentColor"
                                  name="Tape"
                                  ratio={1}
                                >
                                  <g
                                    className="glyph"
                                    fill="currentColor"
                                    transform="translate(0 0) scale(1)"
                                  >
                                    <Tape>
                                      <path
                                        d="M9.08563005,15.9573707 C9.69514275,15.552113 10.2056702,15.0097978 10.573215,14.3744224 L13.426785,14.3744224 C13.7943298,15.0097978 14.3048573,15.552113 14.9143699,15.9573707 L9.08563005,15.9573707 Z M6.459681,15.9573707 C4.27408551,15.9573707 2.50231029,14.1855955 2.50231029,12 C2.50231029,9.81440451 4.27408551,8.04262929 6.459681,8.04262929 C8.6452765,8.04262929 10.4170517,9.81440451 10.4170517,12 C10.4170517,14.1855955 8.6452765,15.9573707 6.459681,15.9573707 Z M6.459681,14.3744224 C7.7710383,14.3744224 8.83410343,13.3113573 8.83410343,12 C8.83410343,10.6886427 7.7710383,9.62557757 6.459681,9.62557757 C5.14832371,9.62557757 4.08525857,10.6886427 4.08525857,12 C4.08525857,13.3113573 5.14832371,14.3744224 6.459681,14.3744224 Z M17.540319,15.9573707 C15.3547235,15.9573707 13.5829483,14.1855955 13.5829483,12 C13.5829483,9.81440451 15.3547235,8.04262929 17.540319,8.04262929 C19.7259145,8.04262929 21.4976897,9.81440451 21.4976897,12 C21.4976897,14.1855955 19.7259145,15.9573707 17.540319,15.9573707 Z M17.540319,14.3744224 C18.8516763,14.3744224 19.9147414,13.3113573 19.9147414,12 C19.9147414,10.6886427 18.8516763,9.62557757 17.540319,9.62557757 C16.2289617,9.62557757 15.1658966,10.6886427 15.1658966,12 C15.1658966,13.3113573 16.2289617,14.3744224 17.540319,14.3744224 Z"
                                        id="shape"
                                      />
                                    </Tape>
                                  </g>
                                </Glyph>
                              </g>
                            </styled.g>
                          </svg>
                        </styled.svg>
                      </Icon>
                    </span>
                  </styled.span>
                  <styled.h3>
                    <h3
                      className="c6"
                    >
                      Metrics Cache
                    </h3>
                  </styled.h3>
                </header>
              </styled.header>
              <styled.div
                flex={true}
              >
                <div
                  className="c7"
                >
                  <Readout
                    cacheCard={true}
                    readoutItems={
                      Array [
                        Object {
                          "children": <Button
                            clickAction={[Function]}
                            glyph="Close"
                            label="Clear Cache"
                            tabIndex={0}
                          />,
                          "title": "Cache Size",
                          "value": "67.48 KB",
                        },
                      ]
                    }
                  >
                    <styled.div
                      cacheCard={true}
                    >
                      <div
                        className="c16"
                      >
                        <ReadoutItem
                          cacheCard={true}
                          key="Cache Size|67.48 KB|undefined"
                          title="Cache Size"
                          value="67.48 KB"
                        >
                          <styled.div
                            cacheCard={true}
                          >
                            <div
                              className="c17"
                            >
                              <styled.div>
                                <div
                                  className="c18"
                                >
                                  <styled.h2>
                                    <h2
                                      className="c19"
                                    >
                                      Cache Size
                                    </h2>
                                  </styled.h2>
                                  <styled.span>
                                    <span
                                      className="c20"
                                    >
                                      67.48 KB
                                    </span>
                                  </styled.span>
                                  <Button
                                    clickAction={[Function]}
                                    glyph="Close"
                                    label="Clear Cache"
                                    tabIndex={0}
                                  >
                                    <styled.button
                                      onClick={[Function]}
                                      tabIndex={0}
                                      title="Clear Cache"
                                    >
                                      <button
                                        className="c21"
                                        onClick={[Function]}
                                        tabIndex={0}
                                        title="Clear Cache"
                                      >
                                        <Icon>
                                          <styled.svg
                                            aria-labelledby="ariaLabelledby"
                                            focusable="false"
                                            glyphColor="currentColor"
                                            iconRatio="1"
                                          >
                                            <svg
                                              aria-labelledby="ariaLabelledby"
                                              className="c4"
                                              focusable="false"
                                              version="1.1"
                                              viewBox="0 0 24 24"
                                              xmlns="http://www.w3.org/2000/svg"
                                              xmlnsXlink="http://www.w3.org/1999/xlink"
                                            >
                                              <styled.g
                                                ratio={1}
                                                title=""
                                              >
                                                <g
                                                  className="c5"
                                                  fill="currentColor"
                                                  title=""
                                                >
                                                  <title />
                                                  <Glyph
                                                    glyphColor="currentColor"
                                                    name="Close"
                                                    ratio={1}
                                                  >
                                                    <g
                                                      className="glyph"
                                                      fill="currentColor"
                                                      transform="translate(0 0) scale(1)"
                                                    >
                                                      <Close>
                                                        <path
                                                          d="M12,10.9528132 L6.76406623,5.71687948 C6.47489359,5.42770684 6.00605212,5.42770684 5.71687948,5.71687948 C5.42770684,6.00605212 5.42770684,6.47489359 5.71687948,6.76406623 L10.9528132,12 L5.71687948,17.2359338 C5.42770684,17.5251064 5.42770684,17.9939479 5.71687948,18.2831205 C6.00605212,18.5722932 6.47489359,18.5722932 6.76406623,18.2831205 L12,13.0471868 L17.2359338,18.2831205 C17.5251064,18.5722932 17.9939479,18.5722932 18.2831205,18.2831205 C18.5722932,17.9939479 18.5722932,17.5251064 18.2831205,17.2359338 L13.0471868,12 L18.2831205,6.76406623 C18.5722932,6.47489359 18.5722932,6.00605212 18.2831205,5.71687948 C17.9939479,5.42770684 17.5251064,5.42770684 17.2359338,5.71687948 L12,10.9528132 Z"
                                                          id="Combined-Shape"
                                                        />
                                                      </Close>
                                                    </g>
                                                  </Glyph>
                                                </g>
                                              </styled.g>
                                            </svg>
                                          </styled.svg>
                                        </Icon>
                                        <span>
                                          Clear Cache
                                        </span>
                                      </button>
                                    </styled.button>
                                  </Button>
                                </div>
                              </styled.div>
                            </div>
                          </styled.div>
                        </ReadoutItem>
                      </div>
                    </styled.div>
                  </Readout>
                </div>
              </styled.div>
            </section>
          </styled.section>
        </LayoutSection>
      </ErrorBoundary>
    </SettingsGrid>
  </InjectIntl(SettingsGrid)>
</Connect(InjectIntl(SettingsGrid))>
`;
