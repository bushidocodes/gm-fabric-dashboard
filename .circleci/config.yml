# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#

# Set defaults for all jobs
defaults: &defaults
  working_directory: ~/repo
  environment:
    CC_TEST_REPORTER_ID: 8d6b13736e5671bfae1278c53eae2dc43fe937f0deb7215ec76b2b684bea0682
    TZ: /usr/share/zoneinfo/America/New_York
  docker:
    - image: circleci/node:carbon

version: 2
jobs:
  setup:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          name: Restore node_modules
          keys:
            - wakka-wakka-
            # - cache-{{ .Branch }}-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            # - cache-{{ .Branch }}-
            # - cache-
      - run:
          name: Install dependencies
          command: |
            npm install
      - save_cache:
          name: Cache node_modules
          paths:
            - node_modules
          key: cache-{{ .Branch }}-{{ checksum "package.json" }}
      - restore_cache:
          name: Restore Code Climate Test Reporter
          keys:
            - v2-cc-reporter-
      - run:
          name: Install Code Climate Test Reporter
          command: |
            if [ ! -f cc-test-reporter ]; then curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter && chmod +x ./cc-test-reporter; fi
      - save_cache:
          name: Cache Code Climate Test Reporter
          paths:
            - cc-test-reporter
          key: v1-cc-reporter-
      - persist_to_workspace: 
          root: ~/repo
          paths:
            - node_modules
            - cc-test-reporter
  test:linters:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - run:
          name: Run linters
          # Setting max warning to treat all eslint warning as errors that break
          # the build. This matches the behavior of npm build and allows us to 
          # fail builds that would otherwise later break. Stylelint only breaks
          # the build on errors because we use verbose warnings to warn about
          # CSS that is not fully supported by our browser support matrix.
          command: | 
            npm run lint-js -- --max-warnings=0 && npm run lint-css

  build:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      # Generate a build
      - run:
          name: Build the application
          command: |
            npm run build
      - run:
          name: Compress the build directory into a tarball
          command: tar -czf build.tar.gz build
      # Store Assets generated by npm build
      - store_artifacts:
          path: bundlesize
      - store_artifacts:
          path: build.tar.gz
  
  draft-github-release: 
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - run:
          name: Draft GitHub Release
          command: npm run draft-github-release
          
  test:e2e: 
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - run:
          name: Run end to end tests
          command: npm run test:e2e
          no_output_timeout: 20m
      - store_test_results:
          path: browserstack-results

  test:unit:
    <<: *defaults
    parallelism: 3
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      # CircleCI 2.0 no longer allows interpolation of env variables. This is the workaround: 
      # https://discuss.circleci.com/t/using-environment-variables-in-config-yml-not-working/14237
      - run: 
          command: mkdir results
      - run:
          name: Set JEST_JUNIT_OUTPUT
          command: echo 'export JEST_JUNIT_OUTPUT="results/junit-$CIRCLE_NODE_INDEX.xml"' >> $BASH_ENV
      - run:
          name: Prepare Code Climate Test Reporter
          command: ./cc-test-reporter before-build
      - run:
          name: Run tests
          # split tests by timing and then run npm test
          command: |
            circleci tests glob "src/**/*.test.js" | circleci tests split --split-by=timings | \
            xargs npm test -- --testResultsProcessor="jest-junit"  --coverage
      - run: 
          name: Format coverage
          command: ./cc-test-reporter format-coverage --output coverage/codeclimate.$CIRCLE_NODE_INDEX.json
      - persist_to_workspace: 
          root: ~/repo
          paths:
            - results
            - coverage
            - cc-test-reporter
            
  coverage:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - run:
          name: Send Istanbul LCOV Results to Code Climate
          command: |
            ./cc-test-reporter sum-coverage coverage/codeclimate.*.json
            ./cc-test-reporter upload-coverage
      - run: 
          name: Merge junit results
          command: mkdir junit && npm run junit-merge -- -d results -o junit/junit.xml
      # Store Assets generated by npm test
      - store_artifacts:
          path: junit
      - store_test_results:
          path: junit
      - store_artifacts:
          path: coverage

# Define a workflow to specify the run order of jobs
# More info at https://circleci.com/docs/2.0/workflows/
workflows:
  version: 2
  all-but-release:
    jobs:
      - setup:
          filters:
            tags:
              ignore: /^v.*/
      - test:linters:
          requires:
            - setup
          filters:
            tags:
              ignore: /^v.*/
      - test:unit:
          requires:
            - setup
          filters:
            tags:
              ignore: /^v.*/
      - coverage:
          requires:
            - test:unit
          filters:
            tags:
              ignore: /^v.*/


  tagged-release: 
    jobs:
      - setup:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      # - test:e2e:
      #     requires:
      #       - setup
      #     filters:
      #       tags:
      #         only: /^v.*/
      #       branches:
      #         ignore: /.*/
      - build:
          requires: 
            - setup
            # - test:e2e
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - draft-github-release:
          requires:
            # - test:e2e
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
